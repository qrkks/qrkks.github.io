<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python Website Building Learning Journal - Code Learning</title><link href="https://qrkks.github.io/" rel="alternate"></link><link href="https://qrkks.github.io/feeds/code-learning.atom.xml" rel="self"></link><id>https://qrkks.github.io/</id><updated>2023-12-31T14:37:18+08:00</updated><entry><title>深入理解 JavaScript 中的 forEach 方法</title><link href="https://qrkks.github.io/2023/12/31/shen-ru-li-jie-javascript-zhong-de-foreach-fang-fa.html" rel="alternate"></link><published>2023-12-31T00:00:00+08:00</published><updated>2023-12-31T14:37:18+08:00</updated><author><name></name></author><id>tag:qrkks.github.io,2023-12-31:/2023/12/31/shen-ru-li-jie-javascript-zhong-de-foreach-fang-fa.html</id><summary type="html">&lt;p&gt;这篇文章提供了对 &lt;code&gt;forEach&lt;/code&gt; 方法的基本介绍、使用方法、与传统循环的比较以及适用场景。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1 简介&lt;/h2&gt;
&lt;p&gt;JavaScript 的 &lt;code&gt;forEach&lt;/code&gt; 方法是一种在数组上执行操作的常用技术。它为数组的每个元素执行一次提供的函数，使得处理数组变得简单而直观。&lt;/p&gt;
&lt;h2&gt;2 什么是 forEach&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt; 是 Array 对象的一个方法。它为数组中的每个元素执行一次提供的函数。不像 &lt;code&gt;map&lt;/code&gt; 或 &lt;code&gt;filter&lt;/code&gt;，&lt;code&gt;forEach&lt;/code&gt; 不返回任何值，它仅用于操作或改变数组。&lt;/p&gt;
&lt;h3&gt;2.1 基本语法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;thisValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;currentValue&lt;/code&gt;：数组中正在处理的当前元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;（可选）：数组中正在处理的当前元素的索引。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr&lt;/code&gt;（可选）：&lt;code&gt;forEach&lt;/code&gt; 方法正在操作的数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thisValue&lt;/code&gt;（可选）：执行回调时使用的 &lt;code&gt;this&lt;/code&gt; 值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.2 示例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;item1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;item2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;item3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3 forEach 与传统循环的比较&lt;/h2&gt;
&lt;p&gt;虽然 &lt;code&gt;forEach&lt;/code&gt; 可以用来替代传统的 &lt;code&gt;for&lt;/code&gt; 循环，但它们之间有一些关键的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;简洁性&lt;/strong&gt;：&lt;code&gt;forEach&lt;/code&gt; 通常比传统的 &lt;code&gt;for&lt;/code&gt; 循环更简洁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无法中断&lt;/strong&gt;：在 &lt;code&gt;forEach&lt;/code&gt; 循环中，&lt;strong&gt;不能使用 &lt;code&gt;break&lt;/code&gt; 或 &lt;code&gt;continue&lt;/code&gt; 来中断或跳过迭代&lt;/strong&gt;。（直接使用 &lt;code&gt;return&lt;/code&gt; 跳出循环）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;4 适用场景&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt; 最适合那些需要遍历数组并对每个元素执行操作，但不需要中断循环的场景。&lt;/p&gt;
&lt;h2&gt;5 Q&amp;amp;A&lt;/h2&gt;
&lt;h3&gt;5.1 &lt;code&gt;item&lt;/code&gt;,&lt;code&gt;index&lt;/code&gt;,&lt;code&gt;arr&lt;/code&gt; 都可以随便命名吗？&lt;/h3&gt;
&lt;p&gt;是的，&lt;code&gt;item&lt;/code&gt;、&lt;code&gt;index&lt;/code&gt; 和 &lt;code&gt;arr&lt;/code&gt; 这些参数的名称在 &lt;code&gt;forEach&lt;/code&gt; 方法的回调函数中是可以自由命名的。它们只是参数的标识符，您可以根据您的喜好或者代码的语义上下文来命名它们。重要的是它们在 &lt;code&gt;forEach&lt;/code&gt; 回调函数中的位置：第一个参数总是当前元素，第二个是当前元素的索引，第三个是数组本身。这些参数的实际名称可以任意指定。&lt;/p&gt;
&lt;h3&gt;5.2 &lt;code&gt;item&lt;/code&gt;,&lt;code&gt;index&lt;/code&gt;,&lt;code&gt;arr&lt;/code&gt; 是位置参数？&lt;/h3&gt;
&lt;p&gt;是的，这三个参数 —— 当前元素 (&lt;code&gt;item&lt;/code&gt; 或 &lt;code&gt;node&lt;/code&gt;)、索引 (&lt;code&gt;index&lt;/code&gt;)、以及数组本身 (&lt;code&gt;arr&lt;/code&gt;) —— 是 &lt;code&gt;forEach&lt;/code&gt; 方法中回调函数的位置参数。它们按照这个顺序被传递给函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数代表数组中当前正在处理的元素。&lt;/li&gt;
&lt;li&gt;第二个参数是当前元素的索引。&lt;/li&gt;
&lt;li&gt;第三个参数是数组本身。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些参数的顺序是固定的，您可以根据需要使用其中的一个或多个。&lt;/p&gt;
&lt;h3&gt;5.3 &lt;code&gt;thisValue&lt;/code&gt; 是什么？&lt;/h3&gt;
&lt;p&gt;在 JavaScript 的 &lt;code&gt;forEach&lt;/code&gt; 方法中，&lt;code&gt;thisValue&lt;/code&gt; 是一个可选参数，用于指定执行回调函数时 &lt;code&gt;this&lt;/code&gt; 的值。如果提供 &lt;code&gt;thisValue&lt;/code&gt;，它将被作为回调函数内部的 &lt;code&gt;this&lt;/code&gt; 上下文使用。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;20&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// `this` inside `callback` will refer to `myObject`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这个例子中，&lt;code&gt;myObject&lt;/code&gt; 作为 &lt;code&gt;thisValue&lt;/code&gt; 被传递给 &lt;code&gt;forEach&lt;/code&gt;，因此在 &lt;code&gt;callback&lt;/code&gt; 函数内部，&lt;code&gt;this&lt;/code&gt; 指向 &lt;code&gt;myObject&lt;/code&gt;。如果不指定 &lt;code&gt;thisValue&lt;/code&gt;，&lt;code&gt;this&lt;/code&gt; 将是全局对象（在非严格模式下）或 &lt;code&gt;undefined&lt;/code&gt;（在严格模式下）。&lt;/p&gt;</content><category term="Code Learning"></category><category term="javascript"></category><category term="forEach"></category><category term="数组处理"></category><category term="迭代方法"></category></entry><entry><title>JavaScript 与 Python 中的 `map` 函数比较</title><link href="https://qrkks.github.io/2023/12/30/javascript-yu-python-zhong-de-map-han-shu-bi-jiao.html" rel="alternate"></link><published>2023-12-30T00:00:00+08:00</published><updated>2023-12-30T10:55:02+08:00</updated><author><name></name></author><id>tag:qrkks.github.io,2023-12-30:/2023/12/30/javascript-yu-python-zhong-de-map-han-shu-bi-jiao.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;1 什么是 &lt;code&gt;map&lt;/code&gt; 函数？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; 是一种常用的函数式编程技术，用于对序列中的每个元素执行相同的操作，并返回一个新的序列，其中包含了原序列中每个元素经过指定操作后的结果。&lt;/p&gt;
&lt;h3&gt;1.1 JavaScript 中的 &lt;code&gt;map&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在 JavaScript 中，&lt;code&gt;map&lt;/code&gt; 是数组的一个方法。它对数组中的&lt;strong&gt;每个元素&lt;/strong&gt;执行一个&lt;strong&gt;由你提供的函数&lt;/strong&gt;，并返回一个新数组，这个新数组包含原数组中每个元素经过函数处理后的结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;squared&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 输出: [1, 4, 9, 16]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里，&lt;code&gt;map&lt;/code&gt; 方法接收一个函数（&lt;code&gt;num =&amp;gt; num * num&lt;/code&gt;），这个函数计算数组 &lt;code&gt;numbers&lt;/code&gt; 中每个元素的平方。&lt;/p&gt;
&lt;h3&gt;1.2 Python 中的 &lt;code&gt;map&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Python 中的 &lt;code&gt;map&lt;/code&gt; 是一个内置函数，它接收两个参数：&lt;strong&gt;一个函数和一个可迭代对象&lt;/strong&gt;（如列表）。它对可迭代对象中的每个元素应用这个函数，并返回一个 &lt;code&gt;map&lt;/code&gt; 对象，这是一个迭代器，包含了所有经过函数处理的元素。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;squared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 输出: [1, 4, 9, 16]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这个例子中，我们使用了 &lt;code&gt;lambda&lt;/code&gt; 函数来计算列表 &lt;code&gt;numbers&lt;/code&gt; 中每个元素的平方。&lt;/p&gt;
&lt;h2&gt;2 相似之处&lt;/h2&gt;
&lt;p&gt;JavaScript 和 Python 中的 &lt;code&gt;map&lt;/code&gt; 函数都用于对序列中的每个元素应用一个函数，并收集结果。它们都是函数式编程的例证，有助于编写更简洁、更清晰的代码。&lt;/p&gt;
&lt;h2&gt;3 不同之处&lt;/h2&gt;
&lt;p&gt;尽管基本概念相似，但 JavaScript 和 Python 中的 &lt;code&gt;map&lt;/code&gt; 函数在使用和行为上有一些关键差异：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;返回值类型：&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;JavaScript 的 &lt;code&gt;map&lt;/code&gt; 返回一个&lt;strong&gt;新数组&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python 的 &lt;code&gt;map&lt;/code&gt; 返回一个 &lt;strong&gt;&lt;code&gt;map&lt;/code&gt; 对象&lt;/strong&gt;（迭代器），通常需要使用 &lt;strong&gt;&lt;code&gt;list()&lt;/code&gt; 函数&lt;/strong&gt;转换为列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;调用方式：&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在 JavaScript 中，&lt;code&gt;map&lt;/code&gt; 是&lt;strong&gt;数组的方法&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Python 中，&lt;code&gt;map&lt;/code&gt; 是一个&lt;strong&gt;全局函数&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对空元素的处理（JavaScript 特有）：&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript 中的 &lt;code&gt;map&lt;/code&gt; 会跳过空元素。&lt;/li&gt;
&lt;li&gt;Python 中的 &lt;code&gt;map&lt;/code&gt; 会对可迭代对象中的每个元素执行操作，不会自动跳过。&lt;/li&gt;
&lt;/ol&gt;</content><category term="Code Learning"></category><category term="JavaScript 和 Python 比较"></category><category term="编程语言比较"></category><category term="javascript"></category><category term="python"></category></entry><entry><title>Python 的 f-strings 与 JavaScript 的模板字符串：一场优雅字符串处理的比较</title><link href="https://qrkks.github.io/2023/12/30/python-de-f-strings-yu-javascript-de-mo-ban-zi-fu-chuan-yi-chang-you-ya-zi-fu-chuan-chu-li-de-bi-jiao.html" rel="alternate"></link><published>2023-12-30T00:00:00+08:00</published><updated>2023-12-30T10:46:00+08:00</updated><author><name></name></author><id>tag:qrkks.github.io,2023-12-30:/2023/12/30/python-de-f-strings-yu-javascript-de-mo-ban-zi-fu-chuan-yi-chang-you-ya-zi-fu-chuan-chu-li-de-bi-jiao.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;1 引言&lt;/h2&gt;
&lt;p&gt;在现代编程中，字符串处理是一项基础且重要的任务。Python 和 JavaScript，作为两种流行的编程语言，都提供了各自的解决方案来简化字符串中的动态表达式插入：Python 的 f-strings 和 JavaScript 的模板字符串。本文旨在比较这两种方法的特点和用途。&lt;/p&gt;
&lt;h2&gt;2 Python 的 F-strings&lt;/h2&gt;
&lt;p&gt;引入于 Python 3.6，f-strings 是格式化字符串的一种新方法。使用起来既简单又直观，它通过在字符串前加 &lt;code&gt;f&lt;/code&gt; 或 &lt;code&gt;F&lt;/code&gt; 并在花括号 &lt;code&gt;{}&lt;/code&gt; 中插入表达式来工作。&lt;/p&gt;
&lt;h3&gt;2.1 特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简洁性&lt;/strong&gt;：直接在字符串中嵌入变量和表达式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可读性&lt;/strong&gt;：代码易于编写且阅读性高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率&lt;/strong&gt;：比传统的格式化方法（如 &lt;code&gt;%&lt;/code&gt; 操作符或 &lt;code&gt;str.format()&lt;/code&gt;）更高效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.2 示例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. You are &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old.&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3 JavaScript 的模板字符串&lt;/h2&gt;
&lt;p&gt;随着 ECMAScript 2015 (ES6) 的推出，模板字符串成为了 JavaScript 的一个新特性。它们使用反引号 &lt;code&gt;`&lt;/code&gt; 来定义，并允许通过 &lt;code&gt;${expression}&lt;/code&gt; 语法嵌入表达式。&lt;/p&gt;
&lt;h3&gt;3.1 特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多行支持&lt;/strong&gt;：可以轻松地跨越多行，而不需要使用连接符或特殊字符。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活性&lt;/strong&gt;：可以包含任意的表达式，包括函数调用和复杂的运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易用性&lt;/strong&gt;：改善了字符串的组合和多变量插值的可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.2 示例&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`Hello, &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;. You are &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; years old.`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;4 比较与分析&lt;/h2&gt;
&lt;p&gt;虽然 Python 的 f-strings 和 JavaScript 的模板字符串在语法上有所不同，但它们都极大地简化了字符串的构造过程，尤其是在需要动态插入变量或表达式时。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语法差异&lt;/strong&gt;：Python 使用 &lt;code&gt;f"Hello, {name}"&lt;/code&gt; 的格式，而 JavaScript 使用 &lt;code&gt;`Hello, ${name}`&lt;/code&gt;。尽管外观略有不同，但它们的功能和目的非常相似。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：在格式化字符串、构建动态字符串（如 SQL 查询、HTML 模板等）方面，这两种方法都极为有用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：Python 的 f-strings 在性能上通常比传统的格式化方法更优，而 JavaScript 的模板字符串则比传统的字符串拼接更简洁易读。&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code Learning"></category><category term="JavaScript 和 Python 比较"></category><category term="编程语言比较"></category><category term="javascript"></category><category term="python"></category><category term="f-string"></category><category term="模板字符串"></category></entry><entry><title>Python 的 `*` 与Javascript 的`...` ： 展开运算符的比较</title><link href="https://qrkks.github.io/2023/12/29/python-de-yu-javascript-de-zhan-kai-yun-suan-fu-de-bi-jiao.html" rel="alternate"></link><published>2023-12-29T00:00:00+08:00</published><updated>2023-12-29T22:34:30+08:00</updated><author><name></name></author><id>tag:qrkks.github.io,2023-12-29:/2023/12/29/python-de-yu-javascript-de-zhan-kai-yun-suan-fu-de-bi-jiao.html</id><summary type="html">&lt;p&gt;本文对比了JavaScript的展开运算符&lt;code&gt;...&lt;/code&gt;与Python中的&lt;code&gt;*&lt;/code&gt;和&lt;code&gt;**&lt;/code&gt;运算符，重点介绍了它们在处理数组、对象和函数参数方面的不同用法。通过具体的代码示例，文章展示了如何在JavaScript和Python中使用这些运算符进行数据结构的展开和合并。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1 解决一个实际问题&lt;/h2&gt;
&lt;p&gt;今天，在处理 DOM 操作时，我遇到了一个有趣的场景。问题出在我想要优化下面这段 JavaScript 代码时：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bounding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bounding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#toc-list a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;font-bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text-red-500&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;font-bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text-red-500&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;foundActive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这个代码块中，我发现 &lt;code&gt;classList.add&lt;/code&gt; 和 &lt;code&gt;classList.remove&lt;/code&gt; 方法都使用了相同的类，这意味着我需要在两个不同的地方维护同样的信息。为了提高代码的可维护性，我决定将这些类名提取到一个变量中。但是，我遇到了一个问题：当我尝试将包含空格的字符串 &lt;code&gt;'font-bold text-red-500'&lt;/code&gt; 作为类名参数传递给 &lt;code&gt;classList.add&lt;/code&gt; 和 &lt;code&gt;classList.remove&lt;/code&gt; 方法时，它们无法按预期工作。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我想到了两种方法：&lt;/p&gt;
&lt;h3&gt;方法一：使用数组和展开运算符&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;activeClasses&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text-sky-500&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;font-bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// 在函数中使用展开运算符&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;activeClasses&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 移除多个类&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;activeClasses&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 添加多个类&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;方法二：使用字符串、split 和展开运算符&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;activeClass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text-sky-500 font-bold&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 将字符串转换为数组，并使用展开运算符&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;activeClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;activeClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个过程让我想到了 Python 中的 &lt;code&gt;*&lt;/code&gt;，两者在功能上好像有些相似。&lt;/p&gt;
&lt;h2&gt;2 JavaScript 中的展开运算符 &lt;code&gt;...&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript 的展开运算符（&lt;code&gt;...&lt;/code&gt;）是一个多功能且强大的工具。它不仅可以在函数调用中展开数组元素为单独的参数，还可以在数组和对象字面量中用于合并。&lt;/p&gt;
&lt;h3&gt;2.1 函数调用&lt;/h3&gt;
&lt;p&gt;在函数调用中，&lt;code&gt;...&lt;/code&gt; 可以将数组元素展开为单独的参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// 输出: 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.2 数组和对象合并&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt; 运算符还可以用于数组和对象的合并操作。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mergedArr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// 合并数组&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mergedObj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// 合并对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;3 JavaScript 与 Python: 展开运算符的对比&lt;/h2&gt;
&lt;p&gt;实际上，将 Python 中的 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt; 两个运算符共同与 JavaScript 中的 &lt;code&gt;...&lt;/code&gt; 运算符对比更为合理，因为 Python 的这两个运算符结合起来覆盖了 JavaScript 中 &lt;code&gt;...&lt;/code&gt; 运算符的大部分功能。&lt;/p&gt;
&lt;h3&gt;3.1 Python 中的 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt; 运算符&lt;/h3&gt;
&lt;p&gt;1.&lt;strong&gt;&lt;code&gt;*&lt;/code&gt; 用于列表和元组&lt;/strong&gt;：在 Python 中，&lt;code&gt;*&lt;/code&gt; 用于将列表或元组展开为单独的值，这在函数参数传递和列表解构中非常有用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 合并列表&lt;/span&gt;
&lt;span class="n"&gt;list1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;list2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;merged_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# 结果: [1, 2, 3, 4, 5, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 合并元组&lt;/span&gt;
&lt;span class="n"&gt;tuple1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tuple2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;merged_tuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tuple1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tuple2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 结果: (1, 2, 3, 4, 5, 6)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.&lt;strong&gt;&lt;code&gt;**&lt;/code&gt; 用于字典&lt;/strong&gt;：&lt;code&gt;**&lt;/code&gt; 用于展开字典，将键值对作为单独的项展开，这在合并多个字典或将字典转换为函数的关键字参数时非常有用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 合并字典&lt;/span&gt;
&lt;span class="n"&gt;dict1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;dict2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;merged_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dict1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;dict2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3, &amp;#39;d&amp;#39;: 4}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.2 JavaScript 中的 &lt;code&gt;...&lt;/code&gt; 运算符&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数组和对象展开&lt;/strong&gt;：&lt;code&gt;...&lt;/code&gt; 用于展开数组和对象中的元素或属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数参数&lt;/strong&gt;：同样可以将数组展开为函数的多个参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解构赋值&lt;/strong&gt;：&lt;code&gt;...&lt;/code&gt; 还被用于数组和对象的解构赋值。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// 合并对象&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mergedObj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// { a: 1, b: 2, c: 3, d: 4 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3.3 对比总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在处理数组和元组（或类似结构）方面，Python 的 &lt;code&gt;*&lt;/code&gt; 与 JavaScript 的 &lt;code&gt;...&lt;/code&gt; 类似。&lt;/li&gt;
&lt;li&gt;在处理对象（字典）方面，Python 的 &lt;code&gt;**&lt;/code&gt; 与 JavaScript 的 &lt;code&gt;...&lt;/code&gt; 类似。&lt;/li&gt;
&lt;li&gt;JavaScript 的 &lt;code&gt;...&lt;/code&gt; 提供了一种统一的方式来处理数组、对象和其它类型的数据，而 Python 则通过 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt; 分别处理不同类型的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，Python 的 &lt;code&gt;*&lt;/code&gt; 和 &lt;code&gt;**&lt;/code&gt; 结合起来，确实在功能上与 JavaScript 的 &lt;code&gt;...&lt;/code&gt; 有些相似。这两种语言虽然在语法和具体实现上有所不同，但在数据展开和合并的功能上有着类似的应用。&lt;/p&gt;</content><category term="Code Learning"></category><category term="javascript"></category><category term="python"></category><category term="编程"></category><category term="展开运算符"></category><category term="编程语言比较"></category><category term="python 与 javascript 比较"></category></entry></feed>